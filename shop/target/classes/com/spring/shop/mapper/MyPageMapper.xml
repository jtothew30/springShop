<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.spring.shop.mapper.MyPageMapper">
  	<select id="getMyOrderList" parameterType="string" resultType="com.spring.shop.vo.Payment">
  		select * from payment where customer = #{customer} and (status = '결제완료' or status = '배송준비' or status = '배송중' or status = '배송완료') 
  		order by paydate desc
  	</select>
  	
  	<select id="getMyOrderListPr" parameterType="string" resultType="com.spring.shop.vo.Payrequest">
  	select p.*, pb.path, pb.title from proboard pb 
  	inner join (select pr.*, p.pname, p.options from payrequest pr  		 
  					 left outer join production p 
  					 on pr.pno = p.pno 
					 where customer = #{customer} and (status = '결제완료' or status = '배송준비' or status = '배송중' or status = '배송완료') 
					) p 
	on pb.pbno = p.pbno 
	order by payno desc 
  	</select>
  	
  	<select id="getMyClaimList" parameterType="string" resultType="com.spring.shop.vo.Payment">
  		select * from payment where customer = #{customer} and (status = '결제취소' or status = '취소진행중' or status = '반품' or status = '교환') 
  		order by paydate desc
  	</select>
  	
  	<select id="getMyClaimListPr" parameterType="string" resultType="com.spring.shop.vo.Payrequest">
  	select p.*, pb.path, pb.title from proboard pb 
  	inner join (select pr.*, p.pname, p.options from payrequest pr  		 
  					 left outer join production p 
  					 on pr.pno = p.pno 
					 where customer = #{customer} and (status = '결제취소' or status = '취소진행중' or status = '반품' or status = '교환') 
					) p 
	on pb.pbno = p.pbno 
	order by payno desc 
  	</select>
  	
  	<select id="getMyReviewList" parameterType="string" resultType="com.spring.shop.vo.Review">
  		select r.*, pb.title from review r 
		inner join proboard pb 
		on r.pbno = pb.pbno 
		where writer = #{writer} 
		order by rdate desc
  	</select>
  	
  	<select id="getMyQnaList" parameterType="string" resultType="com.spring.shop.vo.Qna">
  		select q.*, pb.title from qna q 
		inner join proboard pb 
		on q.pbno = pb.pbno 
		where writer = #{writer} 
		order by qdate desc
  	</select>
  	
  	
  	<select id="getPayrequestList" parameterType="int" resultType="com.spring.shop.vo.Payrequest">
  		select pr.*, p.pname, p.options, p.category1, p.category2, p.category3 from (select pr.*, pb.title from payrequest pr 
									left outer join proboard pb 
									on pr.pbno = pb.pbno 
									where payno = #{payno}   
									) pr 
		left outer join production p 
		on pr.pno = p.pno 
		order by pbno
  	</select>
  	
  	<select id="searchOrderDate" parameterType="map" resultType="com.spring.shop.vo.Payment">
  		<![CDATA[
  		select * from payment where customer = #{customer} and (status = '결제완료' or status = '배송준비' or status = '배송중' or status = '배송완료')   		 
  		and (paydate >= to_date(#{todate}) and paydate <= to_date(#{fromdate})+1) 		
  		order by paydate desc 
  		]]> 
  	</select>
  	
  	<select id="searchOrderDatePr" parameterType="map" resultType="com.spring.shop.vo.Payrequest">
  		<![CDATA[
  		select p.* from payment py 
		inner join (select p.*, pb.path, pb.title from proboard pb 
						 left outer join (select pr.*, p.pname, p.options from payrequest pr  		 
			  							  left outer join production p 
			  							  on pr.pno = p.pno 
										  where customer = #{customer} 
										  and (status = '결제완료' or status = '배송준비' or status = '배송중' or status = '배송완료') 
										 ) p 
						 on pb.pbno = p.pbno 
						) p 
		on py.payno = p.payno 
		where (paydate >= to_date(#{todate}) and paydate <= to_date(#{fromdate})+1) 
		order by p.payno desc 
  		]]> 
  	</select>
  	
  	
  	<select id="searchClaimDate" parameterType="map" resultType="com.spring.shop.vo.Payment">
  		<![CDATA[
  		select * from payment where customer = #{customer} and (status = '결제취소' or status = '취소진행중' or status = '반품' or status = '교환')   		 
  		and (paydate >= to_date(#{todate}) and paydate <= to_date(#{fromdate})+1) 		
  		order by paydate desc 
  		]]> 
  	</select>
    
    <select id="searchClaimDatePr" parameterType="map" resultType="com.spring.shop.vo.Payrequest">
  		<![CDATA[
  		select p.* from payment py 
		inner join (select p.*, pb.path, pb.title from proboard pb 
						 left outer join (select pr.*, p.pname, p.options from payrequest pr  		 
			  							  left outer join production p 
			  							  on pr.pno = p.pno 
										  where customer = #{customer} 
										  and (status = '결제취소' or status = '취소진행중' or status = '반품' or status = '교환')   		
										 ) p 
						 on pb.pbno = p.pbno 
						) p 
		on py.payno = p.payno 
		where (paydate >= to_date(#{todate}) and paydate <= to_date(#{fromdate})+1) 
		order by p.payno desc 
  		]]> 
  	</select>
  	
  	
  	<select id="searchReviewDate" parameterType="map" resultType="com.spring.shop.vo.Review">
  		<![CDATA[
  		select r.*, pb.title from review r 
		inner join proboard pb 
		on r.pbno = pb.pbno 
		where writer = #{writer} 
		and (rdate >= to_date(#{todate}) and rdate <= to_date(#{fromdate})+1) 
		order by rdate desc
  		]]> 
  	</select>
  	
  	<select id="searchQnaDate" parameterType="map" resultType="com.spring.shop.vo.Qna">
  		<![CDATA[
  		select q.*, pb.title from qna q 
		inner join proboard pb 
		on q.pbno = pb.pbno 
		where writer = #{writer} 
		and (qdate >= to_date(#{todate}) and qdate <= to_date(#{fromdate})+1) 
		order by qdate desc
  		]]> 
  	</select>
    
    
    <update id="cancePay" parameterType="int">
    	update payment set status = '취소진행중' where payno = #{payno}
    </update>
    
    <update id="cancelReq" parameterType="int">
    	update payrequest set status = '취소진행중' where payno = #{payno}
    </update>
    
    
    <delete id="deleteReview" parameterType="int">
    	delete from review where rno = #{rno}
    </delete>
    
    <delete id="deleteReviewReply" parameterType="int">
    	delete from reply where flag = 'review' and no = #{rno}
    </delete>
    
  
  </mapper>